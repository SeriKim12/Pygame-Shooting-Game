import pygame
import os
import sys
import random
from time import sleep

# 게임 스크린 크기
SCREEN_WIDTH = 480
SCREEN_HEIGHT = 640

# 색 정의
BLACK = (0, 0, 0)
WHITE = (200, 200, 200)
YELLOW = (250, 250, 50)
RED = (250, 50, 50)

# 전역 변수
FPS = 60


# Button 클래스
class Button:
    def __init__(self, img_in, x, y, width, height, img_act, x_act, y_act, action = None):
        mouse = pygame.mouse.get_pos()
        click = pygame.mouse.get_pressed()
        if x + width > mouse[0] > x and y + height > mouse[1] > y:
            gameDisplay.blit(img_act,(x_act, y_act))
            if click[0] and action != None:
                sleep(1)
                action()
        else:
            gameDisplay.blit(img_in,(x,y))
            
# Button2 클래스
class Button2:
    def __init__(self, img_in, x, y, width, height, img_act, x_act, y_act, action=None):
        mouse = pygame.mouse.get_pos()
        click = pygame.mouse.get_pressed()
        if x + width > mouse[0] > x and y + height > mouse[1] > y:
            gameDisplay.blit(img_act, (x_act, y_act))
        else:
            gameDisplay.blit(img_in, (x, y))
            
            
def re_start():
    pygame.init()
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    menu_image = pygame.image.load(resource_path('./ourpygame/gameover.jpg'))
    font_20 = pygame.font.Font(resource_path('./ourpygame/youmurdererbb_reg.ttf'), 20)
    run = True
    while run:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                pygame.quit()
        screen.blit(menu_image, [0, 0])
        draw_x = int(SCREEN_WIDTH / 2)
        draw_y = int(SCREEN_HEIGHT / 4)
        title_label = font_20.render("YOU'RE DEAD", True, WHITE)
        text_rect = title_label.get_rect()
        text_rect.center = draw_x, draw_y - 200
        screen.blit(title_label,text_rect)
        startButton = Button(startImg,120,420,60,20,clickStartImg,130,415,startgame)
        quitButton = Button(quitImg,300,420,60,20,clickQuitImg,310,415,quitgame)
        pygame.display.update()
        clock.tick(15)
        
        
#이미지 추가
startImg = pygame.image.load("./ourpygame/starticon.png")
quitImg = pygame.image.load("./ourpygame/quiticon.png")
clickStartImg = pygame.image.load("./ourpygame/clickedStartIcon.png")
clickQuitImg = pygame.image.load("./ourpygame/clickedQuitIcon.png")

#화면 설정
gameDisplay = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

#시간
clock = pygame.time.Clock()

            
# 게임 종료
def quitgame():
    pygame.quit()
    sys.exit()
    
# 다시 시작
def startgame():
    main()
        
        
# 캐릭터 객체
class Fighter(pygame.sprite.Sprite):
    def __init__(self):
        super(Fighter, self).__init__()
        self.image = pygame.image.load(resource_path('./ourpygame/rifle.png'))
        self.rect = self.image.get_rect()
        self.reset()

    # 캐릭터 리셋
    def reset(self):
        self.rect.x = int(SCREEN_WIDTH / 2)
        self.rect.y = SCREEN_HEIGHT - self.rect.height
        self.dx = 0
        self.dy = 0

    # 캐릭터 업데이트
    def update(self):
        self.rect.x += self.dx
        self.rect.y += self.dy

        if self.rect.x < 0 or self.rect.x + self.rect.width > SCREEN_WIDTH:
            self.rect.x -= self.dx

        if self.rect.y < 0 or self.rect.y + self.rect.height > SCREEN_HEIGHT:
            self.rect.y -= self.dy

    # 캐릭터 그리기
    def draw(self, screen):
        screen.blit(self.image, self.rect)

    # 캐릭터 충돌 체크
    def collide(self, sprites):
        for sprite in sprites:
            if pygame.sprite.collide_rect(self, sprite):
                return sprite

# 탄환 객체
class Bullet(pygame.sprite.Sprite):
    def __init__(self, xpos, ypos, speed):
        super(Bullet, self).__init__()
        self.image = pygame.image.load(resource_path('./ourpygame/bullet.png'))
        # self.sound = pygame.mixer.Sound(resource_path('assets/missile.wav'))
        self.rect = self.image.get_rect()
        self.rect.x = xpos
        self.rect.y = ypos
        self.speed = speed

    # 탄환 발사
    def launch(self):
        self.sound.play()

    # 탄환 업데이트
    def update(self):
        self.rect.y -= self.speed
        if self.rect.y + self.rect.height < 0 :
            self.kill()

    # 탄환 충돌 체크
    def collide(self, sprites):
        for sprite in sprites:
            if pygame.sprite.collide_rect(self, sprite):
                return sprite

# 몬스터 객체
class Monster(pygame.sprite.Sprite):
    def __init__(self, xpos, ypos, speed):
        super(Monster, self).__init__()
        monster_images_path = resource_path('./ourpygame/monster')
        image_file_list = os.listdir(monster_images_path)
        self.image_path_list = [os.path.join(monster_images_path, file)
                                for file in image_file_list if file.endswith(".png")]
        choice_monster_path = random.choice(self.image_path_list)
        self.image = pygame.image.load(choice_monster_path)
        self.rect = self.image.get_rect()
        self.rect.x = xpos
        self.rect.y = ypos
        self.speed = speed

    # 몬스터 업데이트
    def update(self):
        self.rect.y += self.speed

    # 몬스터 게임 화면
    def out_of_screen(self):
        if self.rect.y > SCREEN_HEIGHT:
            return True
        


# 게임 객체
class Game():
    def __init__(self):
        self.menu_image = pygame.image.load(resource_path('./ourpygame/background.png'))
        self.background_image = pygame.image.load(resource_path('./ourpygame/background.png'))
        self.explosion_image = pygame.image.load(resource_path('./ourpygame/blood.png'))
        self.default_font = pygame.font.Font(resource_path('./ourpygame/youmurdererbb_reg.ttf'), 28)
        self.font_100 = pygame.font.Font(resource_path('./ourpygame/Ghastly Panic.ttf'), 100)
        self.font_50 = pygame.font.Font(resource_path('./ourpygame/Ghastly Panic.ttf'), 50)

        self.font_30 = pygame.font.Font(resource_path('./ourpygame/youmurdererbb_reg.ttf'), 30)
        #explosion_file = ('./9shooting/assets/explosion01.wav',
        #                   './9shooting/assets/explosion02.wav',
        #                   './9shooting/assets/explosion03.wav')
        #self.explosion_path_list = [resource_path(file) for file in explosion_file]
        #self.gameover_sound = pygame.mixer.Sound(resource_path('./9shooting/assets/gameover.wav'))
        #pygame.mixer.music.load(resource_path('./9shooting/assets/music.wav'))

        self.fighter = Fighter()
        self.bullets = pygame.sprite.Group()
        self.monsters = pygame.sprite.Group()

        self.occur_prob = 40
        self.shot_count = 0
        self.ultimate = 0
        self.count_missed = 0

        # 게임 메뉴 On/Off
        self.menu_on = True

    # 게임 이벤트 처리 및 조작
    def process_events(self):
        # 게임 이벤트 처리
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                return True
            # 메뉴 화면 이벤트 처리
            if self.menu_on:
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_SPACE:
                        # pygame.mixer.music.play(-1)
                        self.shot_count = 0
                        self.count_missed = 0
                        # 게임 메뉴 On/Off
                        self.menu_on = False
            # 게임 화면 이벤트 처리
            else:
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_LEFT:
                        self.fighter.dx -= 5
                    elif event.key == pygame.K_RIGHT:
                        self.fighter.dx += 5
                    elif event.key == pygame.K_UP:
                        self.fighter.dy -= 5
                    elif event.key == pygame.K_DOWN:
                        self.fighter.dy += 5
                    elif event.key == pygame.K_SPACE:
                        bullet = Bullet(self.fighter.rect.centerx, self.fighter.rect.y, 10)
                        # missile.launch()
                        self.bullets.add(bullet)
                    
                    # 필살기
                    elif self.ultimate >= 100 and event.key == pygame.K_a:                      
                        
                        # ex) 3방향, 발사 속도 빠름
                        bullet = Bullet(self.fighter.rect.centerx, self.fighter.rect.y, 20)
                        # missile.launch()
                        self.bullets.add(bullet)                      
                        bullet = Bullet(self.fighter.rect.centerx + 100, self.fighter.rect.y, 20)
                        # missile.launch()
                        self.bullets.add(bullet)
                        bullet = Bullet(self.fighter.rect.centerx - 100, self.fighter.rect.y, 20)
                        # missile.launch()
                        self.bullets.add(bullet)
                        
                        self.ultimate = 0
                            
                elif event.type == pygame.KEYUP:
                    if event.key == pygame.K_LEFT or event.key == pygame.K_RIGHT:
                        self.fighter.dx = 0
                    elif event.key == pygame.K_UP or event.key == pygame.K_DOWN:
                        self.fighter.dy = 0

        return False   

    # 게임 로직 수행
    def run_logic(self, screen):
        # 몬스터 수와 속도 조절
        occur_of_monsters = 1 + int(self.shot_count / 300)
        min_monster_speed = 1 + int(self.shot_count / 200)
        max_monster_speed = 1 + int(self.shot_count / 100)

        # 랜덤 확률의 빈도로 수행
        if random.randint(1, self.occur_prob) == 1:
            # 몬스터 생성 및 생성된 몬스터만큼 점수 증가
            for i in range(occur_of_monsters):
                speed = random.randint(min_monster_speed, max_monster_speed)
                monster = Monster(random.randint(0, SCREEN_WIDTH - 30), 0, speed)
                self.monsters.add(monster)

        # 탄환 충돌 체크
        for bullet in self.bullets:
            monster = bullet.collide(self.monsters)
            if monster:
                self.occur_explosion(screen, monster.rect.x, monster.rect.y)
                self.shot_count += 1
                self.ultimate += 50
                bullet.kill()
                monster.kill()

        # 몬스터 화면 벗어남 체크
        for monster in self.monsters:
            if monster.out_of_screen():
                monster.kill()
                self.count_missed += 1

        # 몬스터와 충돌하거나 5번 이상 놓친 경우
        
        #if pygame.sprite.collide_rect(self.fighter.get_rect(), self.rocks.get_rect()) or self.count_missed >= 5 :
        if self.fighter.collide(self.monsters) or self.count_missed >= 5:
            #pygame.mixer_music.stop()
            self.occur_explosion(screen, self.fighter.rect.x, self.fighter.rect.y)
            #self.gameover_sound.play()
            self.monsters.empty()
            self.fighter.reset()
            self.menu_on = True
            '''for rank in ranking:
                if shot_count*5 > rank:
                    ranking.append(shot_count*5)
                elif len(ranking)==0:
                    ranking.append(shot_count*5)'''
            sleep(1)
            re_start()
            

    # 텍스트 그리기
    def draw_text(self, screen, text, font, x, y, color):
        text_obj = font.render(text, True, color)
        text_rect = text_obj.get_rect()
        text_rect.center = x, y
        screen.blit(text_obj, text_rect)
    
    # 이미지 그리기
    def draw_img(self, screen, img, x, y):
        img_rect = img.get_rect()
        img_rect.center = x, y
        screen.blit(img, img_rect)

    # 충돌 이벤트 발생
    def occur_explosion(self, screen, x, y):
        explosion_image = pygame.image.load(resource_path('./ourpygame/blood.png'))
        explosion_rect = self.explosion_image.get_rect()
        explosion_rect.x = x
        explosion_rect.y = y
        screen.blit(self.explosion_image, explosion_rect)
        pygame.display.update()

        #explosion_sound = pygame.mixer.Sound(random.choice(self.explosion_path_list))
        #explosion_sound.play()

# 게임 메뉴 출력
    def display_menu(self, screen):
        screen.blit(self.menu_image, [0, 0])
        draw_x = int(SCREEN_WIDTH / 2)
        draw_y = int(SCREEN_HEIGHT / 4)
        self.draw_text(screen, 'KILL OR DIE',
                        self.font_100, draw_x, draw_y, YELLOW)

        self.draw_text(screen, 'Press Spacebar',
                        self.font_50, draw_x, draw_y + 200, WHITE)

        self.draw_text(screen, 'for Start',
                        self.font_50, draw_x, draw_y + 250, WHITE)
        self.draw_text(screen, 'made by 4Kim1Park',
                        self.font_30, draw_x - 150, draw_y - 140, WHITE)        
        
        

    # 게임 프레임 출력
    def display_frame(self, screen):
        # 배경 이미지
        screen.blit(self.background_image, self.background_image.get_rect())
        
        # 스코어 : 몬스터 한 마리 당 5점
        self.draw_text(screen, 'score: {}'.format(self.shot_count*5),
                       self.default_font, SCREEN_WIDTH / 9, 15, WHITE)
        
        # 레벨 : 5개 맞출 때마다 레벨 1 업
        self.draw_text(screen, 'level: {}'.format(int(self.shot_count/5)), 
                      self.default_font, 50, 45, WHITE)
        
        
        # 라이프
        self.draw_text(screen, 'life:', self.default_font, 35, 75, RED)
                
        # 놓칠 때마다 라이프 하나씩 깎임        
        if self.count_missed == 0:        
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 70, 75)
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 90, 75) 
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 110, 75) 
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 130, 75) 
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 150, 75)
        elif self.count_missed == 1:
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 70, 75)
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 90, 75) 
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 110, 75) 
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 130, 75)
        elif self.count_missed == 2:
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 70, 75)
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 90, 75) 
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 110, 75)
        elif self.count_missed == 3:
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 70, 75)
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 90, 75)
        elif self.count_missed == 4:
            self.draw_img(screen, pygame.image.load('./ourpygame/heart.png'), 70, 75)
        elif self.count_missed == 5 or self.fighter.collide(self.monsters):
            self.draw_img(screen, None, 70, 75)
        

        
        # 필살기 게이지
        self.draw_text(screen, 'ultimate gauge: {}'.format(self.ultimate),
                       self.font_30, SCREEN_WIDTH*3 / 4, 20, WHITE)
        
        if self.ultimate >= 100:
            self.draw_text(screen, 'USE YOUR ULTIMATE SKILL!',
                        self.font_50, SCREEN_WIDTH / 2, SCREEN_WIDTH, WHITE)        
        
        
        self.monsters.update()
        self.monsters.draw(screen)
        self.bullets.update()
        self.bullets.draw(screen)
        self.fighter.update()
        self.fighter.draw(screen)
   

# 게임 리소스 경로
def resource_path(relative_path):
    try:
        base_path = sys._MEIPASS
    except Exception:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)


# 랭크 화면 출력
def display_rank(screen):
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    menu_image = pygame.image.load(resource_path('./ourpygame/background.png'))
    font_20 = pygame.font.Font(resource_path('./ourpygame/youmurdererbb_reg.ttf'), 20)
    screen.blit(menu_image, [0, 0])
    draw_x = int(SCREEN_WIDTH / 2)
    draw_y = int(SCREEN_HEIGHT / 4)
    
    # for i in range(1,6):
    #         Game.draw_text(screen, "{}등 : {}".format(i, shot_count),
    #                        Game.font_30, 100, 150 + (i*50), WHITE)
    
    
    for i, rank in ranking:
        self.draw_text(screen, i+''+rank,
                        self.font_50, SCREEN_WIDTH / 2, SCREEN_WIDTH, WHITE)
        
    
    title_label = font_20.render('rank display', True, WHITE)
    text_rect = title_label.get_rect()
    text_rect.center = draw_x, draw_y + 200

    screen.blit(title_label,text_rect)
    pygame.display.update()


def main():
    pygame.init()
    pygame.display.set_caption('Shooting Game')
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    clock = pygame.time.Clock()
    game = Game()

    done = False
    while not done:
        done = game.process_events()
        if game.menu_on:  # 게임 메뉴 처리
            game.display_menu(screen)
            # game.display_menu(screen)
        else:  # 게임 화면 처리
            game.run_logic(screen)
            game.display_frame(screen)
            
            # if game.menu_rank:
            #     game.display_rank(screen)
            
        pygame.display.flip()
        clock.tick(FPS)
    pygame.quit()

if __name__ == "__main__":
    main()
